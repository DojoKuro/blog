<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NTU STCS 2016学习笔记 on Kur0&#39;s Blog</title>
    <link>http://localhost:1313/categories/ntu-stcs-2016%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in NTU STCS 2016学习笔记 on Kur0&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 30 Aug 2020 12:22:52 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/ntu-stcs-2016%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>NTU STCS 2016学习笔记 0x04 Format String</title>
      <link>http://localhost:1313/posts/ntu-stcs-2016-w6/</link>
      <pubDate>Sun, 30 Aug 2020 12:22:52 +0000</pubDate>
      <guid>http://localhost:1313/posts/ntu-stcs-2016-w6/</guid>
      <description>&lt;h1 id=&#34;format-string&#34;&gt;Format String&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;在输出火字符串处理函数中用来表示输出的字符串格式&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;在以下的&amp;quot;%s %d&amp;quot;即为format string&lt;/em&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, str, a);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fprintf&lt;/span&gt;(stderr, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, str, a);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sprintf&lt;/span&gt;(buffer, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%s %d&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, str, a);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;format-string-vulnerablility&#34;&gt;Format String Vulnerablility&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;错误的使用方式，直接将使用者的输入作为fmt使用&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;将printf(&amp;quot;%s&amp;quot;, str)，写成gets(str);printf(str);&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;此类错误不易发现，因为如果没有测试特殊input执行结果不变&lt;/em&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;fmt使用方式&#34;&gt;fmt使用方式&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%2$*1$d&amp;#34;&lt;/span&gt;, width, num);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;%2$制定要以%d输出的是第几个参数&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;1$制定要作为输出的长度是第几个参数&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;width = 10,num = 5时相当于printf(&amp;quot;%10d&amp;quot;, 5)&lt;/em&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;w6-fmt-stacktrace.png&#34; alt=&#34;w6-fmt-stacktrace&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;例子:&lt;/strong&gt;&lt;a href=&#34;fmt1&#34;&gt;fmt1&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;source code&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;setvbuf&lt;/span&gt;(stdout,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,_IONBF,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;alarm&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;180&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; str[&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;];&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;gets&lt;/span&gt;(str)) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;printf&lt;/span&gt;(str);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;fmt漏洞成因&#34;&gt;fmt漏洞成因&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;format string可以被攻击者的输入人以控制，而printf本身不会检查后面有几个参数&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;使用%x会造成stack上的info leak&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;使用$控制要leak的位置&lt;/em&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;PS.：&lt;/strong&gt; &lt;em&gt;x64的程序使用%lx&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;leak-libc-base&#34;&gt;leak libc base&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;程序执行起点为_start，把main作为参数传入__libc_start_main&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;__libc_start_main会先完成初始化造作，之后call main函数&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;main的ret addr指向libc内部，且存放在stack上的值可以用%x泄露出来&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;leak出来的位数ec5和return会libc里的位置一致，但由于ASLR的关系使得高位随机&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;会return的位置会在call exit前面一些&lt;/em&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ./fmt1&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;%21$lx&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;7f0438b721e3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;stackguardcanary&#34;&gt;stackguard(CANARY)&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;编译器对stack overflow的一种保护机制&lt;/li&gt;&#xA;&lt;li&gt;在call函数时在stack上放的值&lt;/li&gt;&#xA;&lt;li&gt;函数return时先检查CANARY是否被修改&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;w6-fmt-stackguard.png&#34; alt=&#34;w6-fmt-stackguard&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>NTU STCS 2016学习笔记 0x03 ROP2</title>
      <link>http://localhost:1313/posts/ntu-stcs-2016-w5/</link>
      <pubDate>Sat, 29 Aug 2020 16:31:45 +0000</pubDate>
      <guid>http://localhost:1313/posts/ntu-stcs-2016-w5/</guid>
      <description>&lt;h1 id=&#34;ret2syscall&#34;&gt;ret2syscall&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;跳.plt entry&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;函数参数直接放到接下来的stack&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;用pop-ret处理用过的参数&lt;/em&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;w5-ropcall.png&#34; alt=&#34;w5-ropcall&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;ret2libc&#34;&gt;ret2libc&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;printf,gets,puts等函数所在位置:libc.so.6&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;直接用rop call libc 的system&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;用条件&lt;/em&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;libc版本或者fuction的offset已知&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;ASLR开启情况&lt;/em&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Dynamically Linded Elf 动态链接库相关操作&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 获取libc路径&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ldd ./binary&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 查看libc中的相对位置&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# trick 使用 | grep &amp;#39; system@&amp;#39;来查看想找的symbol&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;readelf -s /lib32/libc.so.6 | grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; system@&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 指定加载的libc位置&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;LD_LIBRARY_PATH&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;./path/to/libc&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Function Lazy Binding&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;library在binary执行时才加载，第一次call function时解析函数位置填入.got.plt&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;推算libc base addr&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;函数在libc的相对位置不变&lt;/em&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;使用readelf得知__libc_start_main和system在libc的相对位置&lt;/em&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;使用任意输入函数print出__libc-start_main的.got内容，推算system在内存的addr&lt;/em&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;用rop构造puts(__libc_start_main@got)&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;要leak的got entry,对应的function必须已经被call过&lt;/em&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;前提：已有或已知远端libc.so.6版本&lt;/em&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Libc Data Base&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;em&gt;已知两个function的address时可以在libcdb里找对应的版本&lt;/em&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;em&gt;&lt;del&gt;✘网站：libcdb.com:the libc data base&lt;/del&gt;&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;✘网站：&lt;a href=&#34;https://libc.nullbyte.cat/&#34;&gt;libc.nullbyte.cat&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;em&gt;✔使用&lt;a href=&#34;https://github.com/lieanu/LibcSearcher&#34;&gt;LibcSearcher&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; LibcSearcher &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#第二个参数，为已泄露的实际地址,或最后12位(比如：d90)，int类型&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; LibcSearcher(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fgets&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0X7ff39014bd90&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;system&amp;#34;&lt;/span&gt;)        &lt;span style=&#34;color:#75715e&#34;&gt;#system 偏移&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;str_bin_sh&amp;#34;&lt;/span&gt;)    &lt;span style=&#34;color:#75715e&#34;&gt;#/bin/sh 偏移&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;obj&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;dump(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__libc_start_main_ret&amp;#34;&lt;/span&gt;)  &#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;Leak libc base&lt;/strong&gt;&#xA;&lt;em&gt;一般leak __libc_start_main的地址，通过LibcSearcher获取system与/bin/sh的地址，再跳转回main触发溢出执行system(&amp;rsquo;/bin/sh&amp;rsquo;)&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>NTU STCS 2016学习笔记 0x02 ROP</title>
      <link>http://localhost:1313/posts/ntu-stcs-2016-w4/</link>
      <pubDate>Tue, 25 Aug 2020 16:46:26 +0000</pubDate>
      <guid>http://localhost:1313/posts/ntu-stcs-2016-w4/</guid>
      <description>&lt;h1 id=&#34;gdbserver&#34;&gt;gdbserver&lt;/h1&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# in bash commandline&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gdbserver 127.0.0.1:4000 ./binary &lt;span style=&#34;color:#75715e&#34;&gt;#break在entrypoint&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# in gdb commandline&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;gdb ./binary&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ target remote 127.0.0.1:4000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 搭配ncat&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ncat -vc &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;gdbserver 127.0.0.1:4000 .binary&amp;#39;&lt;/span&gt; -kl 127.0.0.1 &lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;trick&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;使用gdbscript attach pid&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# .gdbinit&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;set disassembly-flavor intel&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;define at&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  shell echo attach &lt;span style=&#34;color:#66d9ef&#34;&gt;$(&lt;/span&gt;pidof -s $arg0&lt;span style=&#34;color:#66d9ef&#34;&gt;)&lt;/span&gt; &amp;gt; /tmp/foo.gdb&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  source /tmp/foo.gdb&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;end&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h1 id=&#34;rop&#34;&gt;rop&lt;/h1&gt;&#xA;&lt;p&gt;类型包括:ret2syscall ret2text ret2libc&lt;/p&gt;&#xA;&lt;h2 id=&#34;rop2syscall&#34;&gt;rop2syscall&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;找gadget控制syscall需要的regs(eax,ebx,ecx,edx)&lt;/li&gt;&#xA;&lt;li&gt;需要int 80&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;strong&gt;RopGadget&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#usage&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RopGadget --binary ./binary&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#int 80 ; ret&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;RopGadget --binary ./binary --opcode cd80c3&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;&#xA;&lt;p&gt;PS:execve需要&amp;rsquo;/bin/sh&amp;rsquo;，且地址必须已知&#xA;用read吧需要的字符串输入至已知地址的buffer上&lt;/p&gt;</description>
    </item>
    <item>
      <title>NTU STCS 2016学习笔记 0x01 Intro</title>
      <link>http://localhost:1313/posts/ntu-stcs-2016-w3/</link>
      <pubDate>Sun, 23 Aug 2020 16:49:01 +0000</pubDate>
      <guid>http://localhost:1313/posts/ntu-stcs-2016-w3/</guid>
      <description>&lt;h2 id=&#34;objdump&#34;&gt;objdump&lt;/h2&gt;&#xA;&lt;p&gt;常用指令&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ objdump -T binary&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ cat /proc/&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;pidof binary&lt;span style=&#34;color:#e6db74&#34;&gt;`&lt;/span&gt;/maps&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;readelf&#34;&gt;readelf&lt;/h2&gt;&#xA;&lt;p&gt;分析elf binary header里的一些信息&#xA;readelf -a | grep STACK 看能否跑shellcode&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ readelf -a ./binary | grep STACK&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RW  0x10&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;trick&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ readelf -a ./binary | grep &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; system@&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ ldd binary&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;trick:execstack&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$ execstack --h&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Usage: execstack &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;OPTION...&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;execstack -- program to query or set executable stack flag&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -c, --clear-execstack      Clear executable stack flag bit&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -q, --query                Query executable stack flag bit&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -s, --set-execstack        Set executable stack flag bit&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -?, --help                 Give this help list&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      --usage                Give a short usage message&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -V, --version              Print program version&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Report bugs to &amp;lt;jakub@redhat.com&amp;gt;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;&#xA;&lt;h2 id=&#34;ncat&#34;&gt;ncat&lt;/h2&gt;&#xA;&lt;p&gt;建立local service环境，因为你不会再无法debug的情况下直接对remote做事&#xA;ncat -vc ./binary -kl 127.0.0.1 8888&#xA;ncat -vc &amp;lsquo;strace -e trace=read ./binary&amp;rsquo; -kl ::1 4000&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
